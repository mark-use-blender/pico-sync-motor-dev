// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// --- //
// in1 //
// --- //

#define in1_wrap_target 3
#define in1_wrap 4

static const uint16_t in1_program_instructions[] = {
    0x4020, //  0: in     x, 32                      
    0xe020, //  1: set    x, 0                       
    0x2083, //  2: wait   1 gpio, 3                  
            //     .wrap_target
    0xe021, //  3: set    x, 1                       
    0x00c0, //  4: jmp    pin, 0                     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program in1_program = {
    .instructions = in1_program_instructions,
    .length = 5,
    .origin = -1,
};

static inline pio_sm_config in1_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + in1_wrap_target, offset + in1_wrap);
    return c;
}

// Helper function (for use in C program) to initialize this PIO program
void in1_program_init(PIO pio, uint sm, uint offset, uint jpin, float div) {
    // Sets up state machine and wrap target. This function is automatically
    // generated in blink.pio.h.
    pio_sm_config c = in1_program_get_default_config(offset);
    // Set the pin direction to output (in PIO)
    pio_sm_set_consecutive_pindirs(pio, sm, jpin, 1, true);
    sm_config_set_jmp_pin(&c, jpin);
    // Set the clock divider for the state machine
    sm_config_set_clkdiv(&c, div);
    // Load configuration and jump to start of the program
    pio_sm_init(pio, sm, offset, &c);
}

#endif


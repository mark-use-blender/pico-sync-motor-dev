// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// --- //
// in2 //
// --- //

#define in2_wrap_target 0
#define in2_wrap 6

static const uint16_t in2_program_instructions[] = {
            //     .wrap_target
    0xa02b, //  0: mov    x, !null                   
    0x2082, //  1: wait   1 gpio, 2                  
    0x00c4, //  2: jmp    pin, 4                     
    0x0042, //  3: jmp    x--, 2                     
    0xa029, //  4: mov    x, !x                      
    0x4020, //  5: in     x, 32                      
    0x8000, //  6: push   noblock                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program in2_program = {
    .instructions = in2_program_instructions,
    .length = 7,
    .origin = -1,
};

static inline pio_sm_config in2_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + in2_wrap_target, offset + in2_wrap);
    return c;
}

// Helper function (for use in C program) to initialize this PIO program
void in2_program_init(PIO pio, uint sm, uint offset, float div) {
    // Sets up state machine and wrap target. This function is automatically
    pio_sm_config c = in2_program_get_default_config(offset);
    sm_config_set_fifo_join (&c, 2);
    sm_config_set_jmp_pin(&c, 3);
    // Set the clock divider for the state machine
    sm_config_set_clkdiv(&c, div);
    // Load configuration and jump to start of the program
    pio_sm_init(pio, sm, offset, &c);
}

#endif

